def write_aws_configuration_file(aws_config_file: str, aws_config: dict, preserve_other_credentials: bool = True):
    """
    Write the AWS configuration to the configuration file.

    Args:
        aws_config_file (str): The path to the AWS configuration file.
        aws_config (dict): The AWS configuration.
        preserve_other_credentials (bool, optional): If False, only credentials generated by Harvest are preserved. Default is True.
    """

    if preserve_other_credentials:
        output_config = aws_config

    else:
        output_config = {k: v for k, v in aws_config.items() if k.startswith('harvest_') or k == 'default'}

    from configparser import ConfigParser
    config = ConfigParser()
    config.read_dict(output_config)

    with open(aws_config_file, 'w') as file:
        config.write(file)


def read_aws_configuration_file(aws_config_file: str, profile_regex: str = None) -> dict:
    """
    Read the AWS configuration file and return the configuration as a dictionary.

    Args:
        aws_config_file (str): The path to the AWS configuration file.
        profile_regex (str, optional): A regular expression to filter the profiles. If not provided, all profiles are returned.
    """

    from configparser import ConfigParser
    config = ConfigParser()
    config.read(aws_config_file)

    if profile_regex:
        from re import compile
        regex = compile(profile_regex)
        result = {k:v for k, v in config.items() if regex.match(k)}

    else:
        result = config

    return result
